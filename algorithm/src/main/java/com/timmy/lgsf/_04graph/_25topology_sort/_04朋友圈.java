package com.timmy.lgsf._04graph._25topology_sort;

class _04朋友圈 {

    public static void main(String[] args) {
        _04朋友圈 demo = new _04朋友圈();
        int[][] M = {
                {1, 1, 0},
                {1, 1, 0},
                {0, 0, 1},
        };
        int circleNum = demo.findCircleNum(M);
        System.out.println("result:" + circleNum);
    }

    /**
     * 1.理解题意
     * -输入二维矩阵，表示元素i与j的朋友圈关系，数值为1，M[i][j] = 1表示为朋友，0表示不知道
     * -通过i，j之间朋友关系的传递性，相邻且数值为1的区域为同一个朋友圈
     * 2。解题思路
     * -深度优先遍历
     * -
     *
     * @param M
     * @return
     */
    public int findCircleNum(int[][] M) {
        // 在此处写入代码

        return 0;
    }

    /**
     * 班上有 N 名学生。其中有些人是朋友，有些则不是。他们的友谊具有是传递性。
     * 如果已知 A 是 B 的朋友，B 是 C 的朋友，那么我们可以认为 A 也是 C 的朋友。
     * 所谓的朋友圈，是指所有朋友的集合。
     *
     * 给定一个 N * N 的矩阵 M，表示班级中学生之间的朋友关系。如果M[i][j] = 1，
     * 表示已知第 i 个和 j 个学生互为朋友关系，否则为不知道。
     * 你必须输出所有学生中的已知的朋友圈总数。
     *
     * 示例 1：
     * 输入：
     * [[1,1,0],
     * [1,1,0],
     * [0,0,1]]
     * 输出：2
     * 解释：已知学生 0 和学生 1 互为朋友，他们在一个朋友圈。
     * 第2个学生自己在一个朋友圈。所以返回 2 。
     *
     * 示例 2：
     * 输入：
     * [[1,1,0],
     * [1,1,1],
     * [0,1,1]]
     * 输出：1
     * 解释：已知学生 0 和学生 1 互为朋友，学生 1 和学生 2 互为朋友，
     * 所以学生 0 和学生 2 也是朋友，所以他们三个在一个朋友圈，返回 1 。
     *
     * 提示：
     *
     * 1 <= N <= 200
     * M[i][i] == 1
     * M[i][j] == M[j][i]
     */
}
