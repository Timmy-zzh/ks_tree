package com.timmy.lgsf._14greed;

public class _03分发饼干_455 {

    public static void main(String[] args) {
        _03分发饼干_455 demo = new _03分发饼干_455();
        int[] g = {1, 2};
        int[] s = {1, 2, 3};
        int result = demo.findContentChild(g, s);
        System.out.println("result:" + result);
    }

    /**
     * 假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。
     * 对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；
     * 并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，
     * 这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。
     *
     * 示例 1:
     * 输入: g = [1,2,3], s = [1,1]
     * 输出: 1
     * 解释:
     * 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
     * 虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
     * 所以你应该输出1。
     *
     * 示例 2:
     * 输入: g = [1,2], s = [1,2,3]
     * 输出: 2
     * 解释:
     * 你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
     * 你拥有的饼干数量和尺寸都足以让所有孩子满足。
     * 所以你应该输出2.
     *
     * 链接：https://leetcode-cn.com/problems/assign-cookies
     */

    /**
     * 1.理解题意
     * -g数组的孩子，g[i]代表每个孩子的胃口，s数组的饼干，s[j]代表每块饼干的大小，要使s数组的饼干尽量满足多的孩子
     * -所以需要按照 胃口最小的孩子开始满足
     * 2。解题思路
     * -遍历孩子数组和饼干数组，如果当前饼干满足孩子胃口，则两个数组继续比较后面的元素
     * -如果当前饼干满足补了孩子胃口，则需要遍历更大块饼干来进行判断是否满足孩子胃口
     * 3。边界和细节问题
     * -便利孩子与饼干数组范围大小，
     * -返回满足孩子最大数量
     */
    private int findContentChild(int[] g, int[] s) {
        int hc = 0;
        int bc = 0;

        while (hc < g.length && bc < s.length) {
            if (s[bc] >= g[hc]) {
                bc++;
                hc++;
            } else {
                bc++;
            }
        }
        return hc;
    }


}
